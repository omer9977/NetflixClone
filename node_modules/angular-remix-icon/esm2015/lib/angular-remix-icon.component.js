import { ChangeDetectorRef, Component, ElementRef, HostBinding, Input, } from '@angular/core';
import { Icons } from './icon.provider';
import { upperCamelCase } from './utils/utils';
export class AngularRemixIconComponent {
    constructor(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    get classes() {
        return `rmx-icon rmx-icon-${this.name}`;
    }
    ngOnChanges(changes) {
        const icons = Object.assign({}, ...this.icons);
        const svg = icons[`Ri${upperCamelCase(changes.name.currentValue)}`] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n`);
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
}
AngularRemixIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'rmx-icon',
                template: `<ng-content></ng-content>`,
                styles: [`
      :host {
        display: block;
        width: 24px;
        height: 24px;
        fill: currentColor;
      }
    `]
            },] }
];
AngularRemixIconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons }
];
AngularRemixIconComponent.propDecorators = {
    classes: [{ type: HostBinding, args: ['class',] }],
    name: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1yZW1peC1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLXJlbWl4LWljb24vc3JjLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXItcmVtaXgtaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxLQUFLLEdBR04sTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFnQi9DLE1BQU0sT0FBTyx5QkFBeUI7SUFNcEMsWUFDVSxJQUFnQixFQUNoQixjQUFpQyxFQUNqQyxLQUFZO1FBRlosU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFDakMsVUFBSyxHQUFMLEtBQUssQ0FBTztJQUNuQixDQUFDO0lBVEosSUFBMEIsT0FBTztRQUMvQixPQUFPLHFCQUFxQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQVFELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFLLElBQUksQ0FBQyxLQUEwQixDQUFDLENBQUM7UUFDdEUsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMxRSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUN4QyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7OztZQWpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRSwyQkFBMkI7eUJBRW5DOzs7Ozs7O0tBT0M7YUFFSjs7O1lBdkJDLFVBQVU7WUFGVixpQkFBaUI7WUFTVixLQUFLOzs7c0JBa0JYLFdBQVcsU0FBQyxPQUFPO21CQUluQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0QmluZGluZyxcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEljb25zIH0gZnJvbSAnLi9pY29uLnByb3ZpZGVyJztcclxuaW1wb3J0IHsgdXBwZXJDYW1lbENhc2UgfSBmcm9tICcuL3V0aWxzL3V0aWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncm14LWljb24nLFxyXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXHJcbiAgc3R5bGVzOiBbXHJcbiAgICBgXHJcbiAgICAgIDpob3N0IHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB3aWR0aDogMjRweDtcclxuICAgICAgICBoZWlnaHQ6IDI0cHg7XHJcbiAgICAgICAgZmlsbDogY3VycmVudENvbG9yO1xyXG4gICAgICB9XHJcbiAgICBgLFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBbmd1bGFyUmVtaXhJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgZ2V0IGNsYXNzZXMoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgcm14LWljb24gcm14LWljb24tJHt0aGlzLm5hbWV9YDtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpIG5hbWUhOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsZW06IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIHByaXZhdGUgaWNvbnM6IEljb25zXHJcbiAgKSB7fVxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IGljb25zID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uKCh0aGlzLmljb25zIGFzIGFueSkgYXMgb2JqZWN0W10pKTtcclxuICAgIGNvbnN0IHN2ZyA9IGljb25zW2BSaSR7dXBwZXJDYW1lbENhc2UoY2hhbmdlcy5uYW1lLmN1cnJlbnRWYWx1ZSl9YF0gfHwgJyc7XHJcbiAgICBpZiAoIXN2Zykge1xyXG4gICAgICBjb25zb2xlLndhcm4oYEljb24gbm90IGZvdW5kOiAke2NoYW5nZXMubmFtZS5jdXJyZW50VmFsdWV9XFxuYCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmVsZW0ubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSBzdmc7XHJcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLm1hcmtGb3JDaGVjaygpO1xyXG4gIH1cclxufVxyXG4iXX0=